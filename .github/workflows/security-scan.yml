name: Security Scanning

on:
  push:
    paths-ignore:
      - .dockerignore
      - .gitignore
      - .github/ISSUE_TEMPLATE/*
      - .github/PULL_REQUEST_TEMPLATE*
      - ./README.md
      - ./LICENSE
    # Ignore CI if commit message contains '[skip ci]' (e.g., from update-readme chore)
    # This is a GitHub Actions convention, not a YAML field, so we use a job-level if below
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    # Manual trigger for on-demand security scanning
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  # Container Security Scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          # Get latest Alpine and Deno versions for security scanning
          ALPINE_VERSION=$(curl -s https://cz.alpinelinux.org/alpine/latest-stable/releases/x86_64/latest-releases.yaml | awk '/version:/ {print $2; exit}')
          DENO_VERSION=$(curl -s https://api.github.com/repos/denoland/deno/releases/latest | jq -r '.tag_name' | sed 's/v//')
          echo "Building with Alpine: $ALPINE_VERSION, Deno: $DENO_VERSION"
          docker build \
            --build-arg ALPINE_VERSION=$ALPINE_VERSION \
            --build-arg DENO_VERSION=$DENO_VERSION \
            -t security-scan:latest .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'security-scan:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Dependency Security Scanning (Free with Trivy)
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy for dependency scanning
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-dependency-results.sarif'

      - name: Upload Trivy dependency scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-dependency-results.sarif'

  # Code Security Scanning
  code-scan:
    name: Code Security Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, python

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Secret Scanning (Free) - Also runs in build workflow as backup
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    # GitLeaks doesn't support workflow_run trigger, so skip when triggered by workflow_run
    if: github.event_name != 'workflow_run'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history for GitLeaks to scan all commits
          fetch-depth: 0

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_KEY}}

  # SAST (Static Application Security Testing) - Free
  sast-scan:
    name: SAST Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep (Free Community Rules)
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/dockerfile

  # License Compliance Scanning (Free Alternative)
  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: License Check with licensee
        run: |
          # Install licensee gem with sudo
          sudo gem install licensee
          
          # Run license detection
          licensee detect --json > license-report.json
          
          # Display results
          echo "## License Compliance Report" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          cat license-report.json >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # Container Image Scanning with Grype
  grype-scan:
    name: Grype Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          # Get latest Alpine and Deno versions for security scanning
          ALPINE_VERSION=$(curl -s https://cz.alpinelinux.org/alpine/latest-stable/releases/x86_64/latest-releases.yaml | awk '/version:/ {print $2; exit}')
          DENO_VERSION=$(curl -s https://api.github.com/repos/denoland/deno/releases/latest | jq -r '.tag_name' | sed 's/v//')
          echo "Building with Alpine: $ALPINE_VERSION, Deno: $DENO_VERSION"
          docker build \
            --build-arg ALPINE_VERSION=$ALPINE_VERSION \
            --build-arg DENO_VERSION=$DENO_VERSION \
            -t grype-scan:latest .

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        id: grype
        with:
          image: "grype-scan:latest"
          fail-build: false
          severity-cutoff: high

      - name: Upload Grype scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ steps.grype.outputs.sarif }}

  # Security Summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [container-scan, dependency-scan, code-scan, secret-scan, sast-scan, grype-scan]
    if: always()
    steps:
      - name: Security Scan Summary
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Container Security: ${{ needs.container-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Dependency Security: ${{ needs.dependency-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Code Security: ${{ needs.code-scan.result }}" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            echo "- Secret Scanning: skipped (runs in build workflow)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Secret Scanning: ${{ needs.secret-scan.result }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- SAST Scanning: ${{ needs.sast-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Grype Scanning: ${{ needs.grype-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the Security tab for detailed results." >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Note**: Secret scanning (GitLeaks) ran in the build workflow and provides early detection." >> $GITHUB_STEP_SUMMARY
            echo "GitLeaks also runs on manual and scheduled security scans for comprehensive coverage." >> $GITHUB_STEP_SUMMARY
          fi
